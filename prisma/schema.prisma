generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscriber {
  id        Int       @id     @default(autoincrement())
  name      String
  email     String    @unique
  contact   String
  createdAt DateTime  @default(now())
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  contact    String
  password   String
  type       String    @default("user") // Could be 'admin', 'customer', etc.
  createdAt  DateTime  @default(now())

  sessions   Session[]
  bookings   Booking[]
}

model Session {
  id         String    @id @default(uuid())
  token      String    @unique
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
}

model TravelPackage {
  id             Int             @id @default(autoincrement())
  image          String
  title          String
  duration       String
  price          String
  details        String
  description    String
  category       String?
  status         String          // 'active' | 'inactive'
  rating         Float?
  location       String?
  reviewsCount   Int?
  mapEmbedUrl    String?
  bookingUrl     String?
  tags           String[]        // Array of tags
  itinerary      String[]        // Array of itinerary items
  inclusions     String[]        // Array of inclusions
  exclusions     String[]        // Array of exclusions
  availability   Json            // JSON for availability array
  readyToPickup  Json            // JSON for readyToPickup array

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  bookings       Booking[]
}

model Booking {
  id              Int           @id @default(autoincrement())
  packageId       Int
  travelPackage   TravelPackage @relation(fields: [packageId], references: [id])

  userId          Int
  user            User          @relation(fields: [userId], references: [id])

  customerName    String
  customerEmail   String
  travelDate      DateTime
  travelers       Int
  amount          Float
  status          String        // 'pending' | 'confirmed' | 'cancelled' | 'completed'

  createdAt       DateTime      @default(now())
}

model Customer {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  phone           String
  totalBookings   Int
  lastBookingDate DateTime?

  createdAt       DateTime @default(now())
}